// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel DistanceFromTarget
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> Source;
RWTexture2D<float4> Result;
int Width;
int Height;
float4x4 InvVPMatrix;
float3 Target;
float DistanceScale;

 float3 ComputeWorldPosition(float3 screenPos)
 {
     // Transform pixel space to clipping space
     screenPos.x = 2.0f*screenPos.x /Width - 1.0f;
     screenPos.y =  1.0f - 2.0f * screenPos.y/ Height;
     
     // Do inverse VP multiplication
     float4 worldPos = mul(InvVPMatrix,float4(screenPos, 1));
     
     // Calculate final world position
     return worldPos.xyz / worldPos.w;
 }

[numthreads(1,1,1)]
void DistanceFromTarget(uint3 id : SV_DispatchThreadID)
{
	float3 worldPosition = ComputeWorldPosition(float3(id.x,id.y,Source[id.xy].r));
	float3 temp = worldPosition - Target;
	float distance = sqrt(temp.x*temp.x + temp.y*temp.y + temp.z*temp.z);
	float expDis = frac(distance*DistanceScale);
	Result[id.xy]  = float4( expDis ,distance,0.0, 1.0 ) ;
}
